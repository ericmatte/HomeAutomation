# Note: The starting is always if the curtains closed.
esphome:
  name: esp_curtains
  platform: ESP8266
  board: nodemcuv2

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.1.214
    gateway: 192.168.1.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esp-RGB-Lights Fallback Hotspot"
    password: !secret wifi_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret esp_curtains_password

# Enable over-the-air updates
ota:
  password: !secret esp_curtains_password

globals:
  - id: end_stop_open
    type: int
    initial_value: "30600" # ~= 47cm / (1cm * pi) * 2048
    # NumberOfSteps: width / (pulleyDiameter * pi)
    # StepsPerRevolution [FULL_STEP]: 64 * 64 / 2 = 2048

cover:
  - platform: template
    name: "Curtains"
    id: curtains
    device_class: curtain
    assumed_state: false
    has_position: true
    optimistic: false
    open_action:
      - stepper.set_target:
          id: my_stepper
          target: !lambda "return id(end_stop_open);"
      - while:
          condition:
            lambda: "return id(curtains).position != 1;"
          then:
            - cover.template.publish:
                id: curtains
                current_operation: OPENING
                position: !lambda "return (float(float(id(my_stepper).current_position) / float(id(end_stop_open))));"
            - delay: 1000 ms
      - cover.template.publish:
          id: curtains
          current_operation: IDLE
          position: !lambda "return 1;"
    close_action:
      - stepper.set_target:
          id: my_stepper
          target: 0
      - while:
          condition:
            lambda: "return id(curtains).position != 0;"
          then:
            - cover.template.publish:
                id: curtains
                current_operation: CLOSING
                position: !lambda "return (float(float(id(my_stepper).current_position) / float(id(end_stop_open))));"
            - delay: 1000 ms
      - cover.template.publish:
          id: curtains
          current_operation: IDLE
          position: !lambda "return 0;"
    stop_action:
      - stepper.set_target:
          id: my_stepper
          target: !lambda "return id(my_stepper).current_position;"
      - cover.template.publish:
          id: curtains
          current_operation: IDLE
          position: !lambda "return (float(float(id(my_stepper).current_position) / float(id(end_stop_open))));"
    # position_action: will be available in esphome 1.5

stepper:
  - platform: uln2003
    id: my_stepper
    pin_a: D5
    pin_b: D6
    pin_c: D7
    pin_d: D8
    max_speed: 500 steps/s
    acceleration: inf # 50 steps/s^2
    deceleration: inf # 50 steps/s^2
